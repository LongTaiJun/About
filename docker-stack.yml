version: '3.6'

services:

  elasticsearch-001:
    image: docker-elk_elasticsearch
    hostname: elasticsearch-001
    ports:
      - "9201:9200"
      - "9301:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      # Force publishing on the 'elk' overlay.
      network.publish_host: elasticsearch-001
      network.host: 0.0.0.0
      http.cors.enabled: "true"
      http.cors.allow-origin: "*"
      http.port: 9200
      # Set a predictable node name.
      node.name: elasticsearch-001
      # Disable single-node discovery.
      discovery.type: ''
      # Use internal Docker round-robin DNS for unicast discovery.
      discovery.seed_hosts: elasticsearch-001, elasticsearch-002, elasticsearch-003
      # Define initial masters, assuming a cluster size of at least 3.
      cluster.initial_master_nodes: elasticsearch-001, elasticsearch-002, elasticsearch-003
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    deploy:
      placement:
        constraints: [ node.hostname == elasticsearch-001 ]
      mode: replicated
      replicas: 1

  elasticsearch-002:
    image: docker-elk_elasticsearch
    hostname: elasticsearch-002
    ports:
      - "9202:9200"
      - "9302:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      # Force publishing on the 'elk' overlay.
      network.publish_host: elasticsearch-002
      network.host: 0.0.0.0
      http.cors.enabled: "true"
      http.cors.allow-origin: "*"
      http.port: 9200
      # Set a predictable node name.
      node.name: elasticsearch-002
      # Disable single-node discovery.
      discovery.type: ''
      # Use internal Docker round-robin DNS for unicast discovery.
      discovery.seed_hosts: elasticsearch-001, elasticsearch-002, elasticsearch-003
      # Define initial masters, assuming a cluster size of at least 3.
      cluster.initial_master_nodes: elasticsearch-001, elasticsearch-002, elasticsearch-003
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    deploy:
      placement:
        constraints: [ node.hostname == elasticsearch-002 ]
      mode: replicated
      replicas: 1

  elasticsearch-003:
    image: docker-elk_elasticsearch
    hostname: elasticsearch-003
    ports:
      - "9203:9200"
      - "9304:9300"
    configs:
      - source: elastic_config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      # Force publishing on the 'elk' overlay.
      network.publish_host: elasticsearch-003
      network.host: 0.0.0.0
      http.cors.enabled: "true"
      http.cors.allow-origin: "*"
      http.port: 9200
      # Set a predictable node name.
      node.name: elasticsearch-003
      # Disable single-node discovery.
      discovery.type: ''
      # Use internal Docker round-robin DNS for unicast discovery.
      discovery.seed_hosts: elasticsearch-001, elasticsearch-002, elasticsearch-003
      # Define initial masters, assuming a cluster size of at least 3.
      cluster.initial_master_nodes: elasticsearch-001, elasticsearch-002, elasticsearch-003
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
    deploy:
      placement:
        constraints: [ node.hostname == elasticsearch-003 ]
      mode: replicated
      replicas: 1

  logstash:
    image: docker-elk_logstash
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    depends_on:
      - elasticsearch-001
      - elasticsearch-002
      - elasticsearch-003
    configs:
      - source: logstash_config
        target: /usr/share/logstash/config/logstash.yml
      - source: logstash_pipeline
        target: /usr/share/logstash/pipeline/logstash.conf
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    deploy:
      placement:
        constraints: [ node.hostname == elasticsearch-001 ]
      mode: replicated
      replicas: 1

  kibana:
    image: docker-elk_kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch-001
      - elasticsearch-002
      - elasticsearch-003
    environment:
      # The default of 1.4 GB is insufficient for optimizing
      # Search Guard bundles
      NODE_OPTIONS: --max-old-space-size=2048
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - elk
    deploy:
      placement:
        constraints: [ node.hostname == elasticsearch-001 ]
      mode: replicated
      replicas: 1

configs:

  elastic_config:
    file: ./elasticsearch/config/elasticsearch.yml
  logstash_config:
    file: ./logstash/config/logstash.yml
  logstash_pipeline:
    file: ./logstash/pipeline/logstash.conf
  kibana_config:
    file: ./kibana/config/kibana.yml

networks:
  elk:
    driver: overlay
